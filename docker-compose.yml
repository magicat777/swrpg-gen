version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13.0
    container_name: swrpg-neo4j
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    environment:
      - TZ=America/Los_Angeles
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/password}
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_server_default__listen__address=0.0.0.0
      - NEO4J_browser_remote__content__hostname__whitelist=*
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_bolt_advertised__address=localhost:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
      - NEO4J_dbms_connector_http_advertised__address=localhost:7474
      - NEO4J_dbms_connector_bolt_enabled=true
      - NEO4J_dbms_connector_http_enabled=true
      - NEO4J_dbms_connector_https_enabled=false
      - NEO4J_dbms_connector_bolt_tls__level=DISABLED
      - NEO4J_dbms_jvm_additional=-XX:+UseG1GC
      - NEO4J_dbms_allow__upgrade=true
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Document Database
  mongodb:
    image: mongo:6.0
    container_name: swrpg-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./config/database/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - TZ=America/Los_Angeles
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=swrpg
      - MONGODB_WIREDTIGERCACHESIZEGB=1
      - MONGODB_OPLOGSIZEMB=128
    command: ["--wiredTigerCacheSizeGB", "1", "--setParameter", "diagnosticDataCollectionEnabled=false"]
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Weaviate Vector Database (standalone, will integrate with LocalAI later)
  weaviate:
    image: semitechnologies/weaviate:1.19.6
    container_name: swrpg-weaviate
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    environment:
      - TZ=America/Los_Angeles
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai
      - LIMIT_RESOURCES=true
      - QUERY_MAXIMUM_RESULTS=10000
      - MAXIMUM_CONCURRENT_GET_REQUESTS=300
      - CLUSTER_HOSTNAME=weaviate
      - GODEBUG=netdns=go
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:8080/v1/meta"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LocalAI for LLM inference
  localai:
    image: localai/localai:latest-gpu-nvidia-cuda-12
    container_name: swrpg-localai
    ports:
      - "8081:8080"
    volumes:
      - ./models:/models:cached
      - localai_build_cache:/build/cache
    environment:
      - TZ=America/Los_Angeles
      # GPU configuration
      - MODELS_PATH=/models
      - REBUILD=false
      - BUILD_CACHE_PATH=/build/cache
      # Performance settings  
      - THREADS=8
      - F16=true
      # Context and logging
      - CONTEXT_SIZE=8192
      - LOG_LEVEL=error
    runtime: nvidia
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/readyz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
  # Backend API Service
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: swrpg-backend
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./localai/prompt-templates:/app/prompt-templates
    environment:
      - TZ=America/Los_Angeles
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET:-change_this_secret}
      - LOCALAI_API_URL=http://localai:8080
      - LOCALAI_API_KEY=${LOCALAI_API_KEY:-change_this_key}
      - LOCALAI_DEFAULT_MODEL=mistral-7b-instruct-v0.2.Q5_K_M
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-admin}:${MONGODB_PASSWORD:-password}@mongodb:27017/swrpg?authSource=admin
      - WEAVIATE_HOST=weaviate
      - WEAVIATE_PORT=8080
      - LOG_LEVEL=debug
    depends_on:
      neo4j:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      weaviate:
        condition: service_healthy
      localai:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Frontend Web Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      target: development
    container_name: swrpg-frontend
    ports:
      - "3001:3001"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
    environment:
      - TZ=America/Los_Angeles
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000/api
      - VITE_BACKEND_URL=http://backend:3000
      - VITE_LOCALAI_URL=http://localai:8080
      - VITE_ENABLE_DEV_TOOLS=true
      - VITE_ENABLE_HMR=true
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD", "node", "/app/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: swrpg-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    environment:
      - TZ=America/Los_Angeles
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: swrpg-grafana
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - TZ=America/Los_Angeles
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SMTP_ENABLED=false
      - GF_ALERTING_ENABLED=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - swrpg-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: swrpg-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    environment:
      - TZ=America/Los_Angeles
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - swrpg-network

networks:
  swrpg-network:
    driver: bridge

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  mongodb_data:
    driver: local
  weaviate_data:
    driver: local
  localai_models:
    driver: local
  localai_build_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local